import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

public class Main extends Application {

	public Pane pane;
	public Circle c1;
	public Circle c2;
	public Circle c3;
	public Circle c4;
	
	public static void main(String[] args) {
		launch(args);
	}
	
	public void start(Stage stage)
	{
		stage.setTitle("Snake");
		AnimationTimer t = new MyTimer();
		
		int x = 400;
		int y = 340;
		int dist = 18;
		
		c1 = new Circle(x,y,7);
		c1.setStroke(Color.rgb(190, 190, 190));
		c1.setFill(Color.rgb(100, 100, 200));
		y -= dist;
		c2 = new Circle(x,y,7);
		c2.setStroke(Color.rgb(190, 190, 190));
		c2.setFill(Color.rgb(100, 100, 200));
		y -= dist;
		c3 = new Circle(x,y,7);
		c3.setStroke(Color.rgb(190, 190, 190));
		c3.setFill(Color.rgb(100, 100, 200));
		y -= dist;
		c4 = new Circle(x,y,7);
		c4.setStroke(Color.rgb(190, 190, 190));
		c4.setFill(Color.rgb(100, 100, 200));
		y -= dist;
		
		Button StartBtn = new Button("Start");
		StartBtn.setOnAction((ActionEvent e) -> {
			t.start();
		});
			Button StopBtn = new Button("Stop");
			StopBtn.setOnAction((ActionEvent e) -> {
				t.stop();
				
			});
			
		pane = new Pane();
		pane.setMinSize(500,  500);
		pane.getChildren().addAll(c1, c2, c3, c4);
		
		HBox HB = new HBox();
		HB.setPadding(new Insets(10,10,10,10));
		HB.setSpacing(7);
		HB.getChildren().addAll(StartBtn, StopBtn);
		
		VBox VB = new VBox();
		VB.setPadding(new Insets(10,10,10,10));
		VB.setSpacing(7);
		VB.getChildren().addAll(pane, HB);
		
		Scene scene = new Scene(VB);
		stage.setScene(scene);
		stage.show();
	}		
		public void checkUp(Circle c)

		{

		if (c.getCenterX() >= 400 && c.getCenterY() > 100)
		{
		c.setCenterX(c.getCenterX());

		c.setCenterY(c.getCenterY()-18);

		}
		}
		public void checkLeft(Circle c)

		{

		if (c.getCenterY() > 20 &&  c.getCenterY() <= 100)
		{
		c.setCenterX(c.getCenterX() - 18);

		c.setCenterY(c.getCenterY());
		}
		}
		
		public void checkDown(Circle c)

		{

		if (c.getCenterX() <= 20 &&  c.getCenterY() <=  400)
		{
		c.setCenterX(c.getCenterX());

		c.setCenterY(c.getCenterY() + 18);

		}		
		}
		
		public void checkRight(Circle c)

		{

		if (c.getCenterX() < 400 &&  c.getCenterY() >=  400)
		{
		c.setCenterX(c.getCenterX()+18);

		c.setCenterY(c.getCenterY());
		}
		}

	
	
	public class MyTimer extends AnimationTimer 
	{
		public void handle()
		{
		}
		long lastUpdate = 0;
		
		@Override
		public void handle(long now)
		{
			if (now - lastUpdate >= 100000000)
			{
				lastUpdate = now;
				
			
			
			checkUp(c1);
			checkUp(c2);
			checkUp(c3);
			checkUp(c4);

			checkLeft(c1);
			checkLeft(c2);
			checkLeft(c3);
			checkLeft(c4);

			checkRight(c1);
			checkRight(c2);
			checkRight(c3);
			checkRight(c4);

			checkDown(c1);
			checkDown(c2);
			checkDown(c3);
			checkDown(c4);
			}
		}
	}
}
	

